import java.util.Random;

public class ClientThread extends Thread {
	Random r;
	public int id;
	int numOfRequests;

	public ClientThread(int i, int numRequests) {
		id = i;
		r = new Random();
		numOfRequests = numRequests;
	}

	/* while (numOfRequests > 0)
	 * {
	 *   sleep for a random period of time
  	 *   request = a random int from 0 to 7
  	 *   acquire mutexReqCounts
  	 *   reqCounts[request]++
  	 *   release mutexReqCounts
  	 *   signal totalReqCounter
  	 *   wait on the semaphores[request]
  	 *   numOfRequests--;
  	 * }
	 */
	public void run() {
		while (numOfRequests > 0)
		{
			randomSleep();
			int request = r.nextInt(8);
			try {
				Main.bufferQueue.mutexReqCounts.acquire();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			Main.bufferQueue.reqCounts[request]++;
			Main.bufferQueue.mutexReqCounts.release();
			Main.bufferQueue.totalReqCounter.release();
			try {
				Main.bufferQueue.semaphores[request].acquire();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			numOfRequests--;
		}
	}
	
	void printLine(String s)
	{
		System.out.println("Thread " + this.id + " " + s);
	}
	
	void randomSleep()
	{
		try {
			Thread.sleep(r.nextInt(20));
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}