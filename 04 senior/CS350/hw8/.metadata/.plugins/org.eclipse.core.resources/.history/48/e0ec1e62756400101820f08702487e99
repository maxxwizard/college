import java.util.concurrent.*;

public class Main {
	
	final static int numClients = 2;
	final static int numRequests = 3;
	
	static Semaphore totalReqCounter = new Semaphore(0, false);
	static Semaphore[] semaphores;
	static Semaphore mutexReqCounts = new Semaphore(1, false);
	static int[] reqCounts;

	public static void main(String[] args) {
		// initialize synchronization variables
		reqCounts = new int[numClients];
		semaphores = new Semaphore[numClients];
		for (int i = 0; i < numClients; i++)
		{
			reqCounts[i] = 0;
			semaphores[i] = new Semaphore(0, false);
		}
		
		// start camera thread
		CameraThread cameraThread = new CameraThread();
		cameraThread.start();
		
		// start client threads
		ClientThread[] clientThreads = new ClientThread[numClients];
		for (int i = 0; i < numClients; i++)
		{
			clientThreads[i] = new ClientThread(i, numRequests);
			clientThreads[i].start();
		}
		
		// wait for client threads to finish
		for (int i = 0; i < numClients; i++)
		{
			try {
				clientThreads[i].join();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		// stop camera thread
		cameraThread.stop();

	}

}
