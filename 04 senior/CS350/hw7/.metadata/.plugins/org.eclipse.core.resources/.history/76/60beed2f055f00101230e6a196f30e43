import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;

/**
 * @author Matthew Huynh
 * 
 */
public class Main {
	
	public static AtomicIntegerArray flag = new AtomicIntegerArray(2);
	public static AtomicInteger turn = new AtomicInteger(); // default to 0

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		final int N = 2;
		
		/*
		// simulate BadThreads
		BadThread[] badThreads = new BadThread[N];
		for (int i = 0; i < N; i++) {
			badThreads[i] = new BadThread(i);
			badThreads[i].start();
		}*/
		
		// simulate DekkerThreads
		//Global.resetFlags(); // reset flag array
		flag.set(0, 0);
		flag.set(1, 0);
		DekkerThread[] dekkerThreads = new DekkerThread[N];
		for (int i = 0; i < N; i++) {
			dekkerThreads[i] = new DekkerThread(i);
			dekkerThreads[i].start();
		}
		
		/*
		// simulate PetersonThreads
		Global.resetFlags(); // reset flag array
		PetersonThread[] petersonThreads = new PetersonThread[N];
		for (int i = 0; i < N; i++) {
			petersonThreads[i] = new PetersonThread(i);
			petersonThreads[i].start();
		}*/
	}
}
