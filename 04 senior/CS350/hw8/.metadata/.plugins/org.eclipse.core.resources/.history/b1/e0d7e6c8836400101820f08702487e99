
public class CameraThread extends Thread {
	public int numRequestsServed;
	
	public CameraThread() {
		numRequestsServed = 0;
	}

	/* 
	 * sleep for a second (to wait for some requests to queue up)
	 * wait on totalReqCounter
	 * acquire mutexReqCounts
	 * select next request according to FSCAN
	 * delay proportional to time it takes camera to move
	 * signal semaphores[request] reqCounts[request] times
	 * clear reqCounts[request]
	 * release mutexReqCounts
	 */
	public void run() {
		
		while (true)
		{
			// lock the current queue
			
			// process it
			processQueue();
			// then swap the queues
			swapQueues();
		}
	}
	
	void swapQueues()
	{
		
	}
	
	/*
	 * Process the queue in a SCAN fashion.
	 */
	void processQueue()
	{
	}
	
	void printLine(String s)
	{
		System.out.println("Camera " + s);
	}
	
	/*
	void printCurrentQueue()
	{
		System.out.print("[");
		for (int i = 0; i < Main.reqCounts.length; i++)
		{
			System.out.print(Main.reqCounts[i] + "-");
		}
		System.out.println("]");
	}
	*/
	
	/*
	 * Delays the thread proportional to how much the
	 * camera has to move.
	 */
	void cameraDelay(int request)
	{
		
	}
}