import java.util.concurrent.*;

public class Main {

	final static int N = 5;
	static Semaphore semaphores[];
	static volatile int turn = 0;

	public static void main(String[] args) {
		// initialize N semaphores
		semaphores = new Semaphore[N];
		for (int i = 0; i < N; i++)
		{
			if (i == 0)
				semaphores[i] = new Semaphore(1);
			else
				semaphores[i] = new Semaphore(0);
		}
		
		// create threads
		MyThread[] myThreads = new MyThread[N];
		for (int i = 0; i < myThreads.length; i++) {
			myThreads[i] = new MyThread(i);
			myThreads[i].start();
		}
		
		// wait for threads to die
		for (int i = 0; i < myThreads.length; i++) {
			try {
				myThreads[i].join();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
	}
	
	/*
	 * General idea is that a process should signal the next one.
	 * 
	 * wait(semaphores[pid])
	 * print statement
	 * turn = (turn + 1) % N
	 * signal(semaphores[turn])
	 */
	public static void TakeTurns(int pid)
	{
		try {
			semaphores[pid].acquire();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		System.out.println("It is the turn of process " + pid);
		
		turn = (turn + 1) % N;
		
		semaphores[turn].release();
	}

}
