import java.util.concurrent.*;

public class Main {
	
	final static int numClients = 10;
	final static int numRequests = 3;
	final static int numCameraAngles = 8;
	
	static Semaphore mutexActiveQueue = new Semaphore(1, false);
	FscanQueue activeQueue;
	FscanQueue queue1;
	FscanQueue queue2; 

	public static void main(String[] args) {
		// initialize synchronization variables
		
		// start camera thread
		CameraThread cameraThread = new CameraThread();
		cameraThread.start();
		
		// start client threads
		ClientThread[] clientThreads = new ClientThread[numClients];
		for (int i = 0; i < numClients; i++)
		{
			clientThreads[i] = new ClientThread(i, numRequests);
			clientThreads[i].start();
		}
		
		// wait for client threads to finish
		for (int i = 0; i < numClients; i++)
		{
			try {
				clientThreads[i].join();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		// display how many requests were served (should equal to numClients*numRequests)
		System.out.println("expected requests: " + numClients*numRequests);
		System.out.println("serviced requests: " + cameraThread.numRequestsServed);
		
		// stop camera thread
		cameraThread.stop();

	}

}
