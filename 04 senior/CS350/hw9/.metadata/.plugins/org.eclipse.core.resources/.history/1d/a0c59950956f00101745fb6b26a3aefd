import java.util.Random;

public class CarThread extends Thread {
	Random r;
	public int id;
	int numOfRequests;
	Direction direction; // heading towards this direction

	public CarThread(int i, int numRequests, Direction d) {
		id = i;
		numOfRequests = numRequests;
		direction = d;
		
		r = new Random();
	}

	/* while (numOfRequests > 0)
	 * {
	 *   sleep for a random period of time
  	 *   add to appropriate queue
  	 *   signal totalReqCounter (i.e., signal scheduler)
  	 *   wait on appropriate N or S barrier
  	 *   print "N" or "S" to notify crossing
  	 *   numOfRequests--
  	 *   switch directions
  	 *   signal lane (to notify scheduler we've exited)
  	 *   print "e"
  	 * }
	 */
	public void run() {
		while (numOfRequests > 0)
		{
			randomSleep();
			Main.queueUp(id, direction);
			Main.pendingRequests.release();
			waitBarrier();
			printCrossing();
			numOfRequests--;
			direction = (direction == Direction.NORTH) ? Direction.SOUTH : Direction.NORTH;
			Main.lane.release();
			System.out.println("e");
		}
	}
	
	private void printCrossing() {
		if (direction == Direction.NORTH)
		{
			System.out.println("N");
		} else {
			System.out.println("S");
		}
	}
	
	private void waitBarrier() {
		try {
			if (direction == Direction.NORTH)
			{
				Main.northBarrier.acquire();
			}
			else if (direction == Direction.SOUTH)
			{
				Main.southBarrier.acquire();
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	void printLine(String s)
	{
		System.out.println("Thread " + this.id + " " + s);
	}
	
	/*
	 * Randomly sleeps [0,20) ms.
	 */
	void randomSleep()
	{
		try {
			Thread.sleep(r.nextInt(20));
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}