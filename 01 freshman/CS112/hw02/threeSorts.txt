UNSORTED ARRAYS

insertion sort (n-squared)
t		N		time (s)
100000		10		7.327
250000		10		52.747
275000		10		65.847
100000		100		8.384
200000		100		37.748
260000		100		67.732
100000		1000		8.406
200000		1000		37.150
250000		1000		62.973
100000		10000		8.418
200000		10000		37.530
240000		10000		57.631

merge sort (n log n)
t		N		time (s)
1000000		10		0.260
5000000		10		1.326
1000000		100		0.284
5000000		100		1.390
1000000		1000		0.289
5000000		1000		1.455
1000000		10000		0.296
5000000		10000		1.507
1000000		100000		0.310
5000000		100000		1.578
1000000		1000000		0.302
5000000		1000000		1.631

quicksort (n log n)
t		N		time (s)
5000000		10		0.137
5000000		100		1.705
5000000		1000		1.787
5000000		10000		1.816
5000000		100000		1.895
5000000		1000000		1.971

//--------------------------------------

SORTED ARRAYS

insertion sort (n)
t		N		time (s)
5000000		10		0.054
5000000		100		0.039
5000000		1000		0.038
5000000		10000		0.043
5000000		100000		0.050
5000000		1000000		0.044

merge sort (n)
t		N		time (s)
5000000		10		1.180
5000000		100		1.158
5000000		1000		1.144
5000000		10000		1.142
5000000		100000		1.160
5000000		1000000		1.166

quicksort (n log n)
t		N		time (s)
5000000		10		1.675
5000000		100		1.723
5000000		1000		1.846
5000000		10000		1.870
5000000		100000		1.935
5000000		1000000		2.046

//--------------------------------------

There is a difference in performance. Using insertion sort on a sorted array will give O(N) running time because the test for the inner for loop always fails. Using merge sort on a sorted array will take longer because merging two sorted lists takes extra time and memory. Using quicksort on a sorted array will take longer because of the unnecessary recursive calls made.